var passport = require('passport');
var {User} = require('../database/models/User')


module.exports = function() {
    
    /**
    * serializeUser: The user id (we provide as the second argument of the done function) is saved 
    *  in the session and is later used to retrieve the whole object via the deserializeUser
    *  function.serializeUser determines which data of the user object should be stored in the session. 
    *  The result of the serializeUser method is attached to the session as req.session.passport.user = {}. 
    *  In our case, it would be (as we provide the user id as the key) req.session.passport.user = {id: 'xyz'}. 
    *  serializeUser is triggered after a successful invocation of our local strategy and when we are going to log the
    *  user in as part of passport.logIn, to which we pass the user object generated by the local strategy. 
    *  If you want to know more, check this article out.
    */
    passport.serializeUser((user, done) => {
        done(null, user.id);
    });
    
    /**
    * deserializeUser: The first argument of deserializeUser corresponds to the key of the user object that was given 
    * to the done function (see serializeUser). So, the whole object is retrieved with the help of that key. 
    * That key here is the user id (key can be any key of the user object i.e., name, email, etc.). 
    * In deserializeUser that key is matched with the in-memory array/database or any data resource. 
    * The fetched object is attached to the request object as req.user. 
    * deserializeUser is called when we send a request with an attached session Cookie containing a serialized user id.
    */
    passport.deserializeUser((id, done) => {
        User.findById(id, (err, user) => {
            done(err, user);
        });
    });
    
};
